// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	payment_entity "github.com/jfelipearaujo-org/ms-payment-management/internal/entity/payment_entity"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) Create(ctx context.Context, payment *payment_entity.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *payment_entity.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, paymentId
func (_m *MockPaymentRepository) GetByID(ctx context.Context, paymentId string) (payment_entity.Payment, error) {
	ret := _m.Called(ctx, paymentId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 payment_entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (payment_entity.Payment, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) payment_entity.Payment); ok {
		r0 = rf(ctx, paymentId)
	} else {
		r0 = ret.Get(0).(payment_entity.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderID provides a mock function with given fields: ctx, orderId
func (_m *MockPaymentRepository) GetByOrderID(ctx context.Context, orderId string) ([]payment_entity.Payment, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetByOrderID")
	}

	var r0 []payment_entity.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]payment_entity.Payment, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []payment_entity.Payment); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payment_entity.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) Update(ctx context.Context, payment *payment_entity.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *payment_entity.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
